import json
from pathlib import Path


def process_dictionary(
        file_path: str,
        sort_by: str = "key",  # "key" –∏–ª–∏ "value"
        remove_empty_duplicates: bool = True,
        modify_original: bool = True,
) -> tuple[list, dict]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON-—Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{key: value}, ...]:
    - –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏: —Å–Ω–∞—á–∞–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏, –ø–æ—Ç–æ–º –±–µ–∑
    - –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã (—Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–æ–∫—É
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with open(file_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    if not isinstance(data, list):
        raise ValueError("JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ [{key: value}, ...].")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = {
        "total_entries": len(data),
        "duplicates_found": 0,
        "duplicates_removed": 0,
        "entries_with_value": 0,
        "entries_without_value": 0,
    }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    unique_entries = {}
    duplicates_report = {}
    entries_with_value = []
    entries_without_value = []

    for entry in data:
        if not isinstance(entry, dict) or len(entry) != 1:
            raise ValueError("–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω—É –ø–∞—Ä—É key:value.")

        key, value = next(iter(entry.items()))

        if key in unique_entries:
            stats["duplicates_found"] += 1
            duplicates_report.setdefault(key, []).append(value)
            if remove_empty_duplicates and not value:
                stats["duplicates_removed"] += 1
                continue
            # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if unique_entries[key]:
                continue
        unique_entries[key] = value

        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –Ω–∞–ª–∏—á–∏—é –∑–Ω–∞—á–µ–Ω–∏—è
        if value:
            entries_with_value.append({key: value})
        else:
            entries_without_value.append({key: value})

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    def sort_key(item):
        key, value = next(iter(item.items()))
        return key.lower() if sort_by == "key" else str(value).lower()

    entries_with_value.sort(key=sort_key)
    entries_without_value.sort(key=sort_key)

    # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ (—Å–Ω–∞—á–∞–ª–∞ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –ø–æ—Ç–æ–º –±–µ–∑)
    result = entries_with_value + entries_without_value
    stats["entries_with_value"] = len(entries_with_value)
    stats["entries_without_value"] = len(entries_without_value)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    if modify_original:
        with open(file_path, "w", encoding="utf-8") as f:
            f.write("[\n")
            for i, entry in enumerate(result):
                json.dump(entry, f, ensure_ascii=False)
                if i < len(result) - 1:
                    f.write(",\n")
                else:
                    f.write("\n")
            f.write("]")

    # –û—Ç—á–µ—Ç –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
    if duplicates_report:
        print("‚ö† –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–ª—é—á–µ–π:")
        for key, values in duplicates_report.items():
            print(f"   - –ö–ª—é—á: '{key}'")
            for i, val in enumerate(values, 1):
                print(f"     {i}. –ó–Ω–∞—á–µ–Ω–∏–µ: {repr(val)}")

    return result, stats


if __name__ == "__main__":
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    CONFIG = {
        "file_path": "dictionary.json",
        "sort_by": "key",  # "key" –∏–ª–∏ "value"
        "remove_empty_duplicates": True,
        "modify_original": True,
    }

    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    try:
        processed_data, stats = process_dictionary(**CONFIG)

        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_entries']}")
        print(f"  –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {stats['duplicates_found']}")
        print(f"  –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {stats['duplicates_removed']}")
        print(f"  –ó–∞–ø–∏—Å–µ–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏: {stats['entries_with_value']}")
        print(f"  –ó–∞–ø–∏—Å–µ–π –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π: {stats['entries_without_value']}")
        print(f"  –ò—Ç–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(processed_data)}")

        print("\n‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!" if CONFIG["modify_original"] else "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (—Ñ–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω—ë–Ω)")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")